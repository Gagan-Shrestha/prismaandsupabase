generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model SimpleFormData {
    id        Int      @id @default(sequence())
    simepleId String   @default(uuid())
    fullName  String
    date      String?
    address   String?
    gender    String?
    createdAt DateTime @default(now())

    @@map("simpleFormData")
}

model ImageUpload {
    id         Int     @id @default(sequence())
    imageId    String  @default(uuid())
    email      String  @unique
    password   String?
    photoImage String?

    @@map("imageUpload")
}

model EmployeeData {
    id         Int     @id @default(sequence())
    employeeId String  @default(uuid())
    name       String  @unique
    gender     String?
    photo      String?

    @@map("employeeData")
}

model EmployeeInfo {
    id                   Int       @id @default(sequence())
    employeeId           String    @unique @default(uuid())
    employeeName         String?
    gender               String?
    mobile               String?
    citizenshipNumber    String?
    photo                String?
    documents            String[]
    createdAt            DateTime  @default(now())
    lastUpdatedTimeStamp DateTime?

    @@map("employeeInfo")
}

model Auth {
    id             Int      @id @default(sequence())
    userInId       String   @unique @default(uuid())
    userInEmail    String?  @unique
    userInPhone    String?  @unique
    userInPassword String
    userInName     String?
    userIsVerify   Boolean  @default(false)
    validEmail     Boolean  @default(false)
    userIsApproved Boolean  @default(false)
    userIsRejected Boolean  @default(false)
    createdAt      DateTime @default(now())
    role           Role?

    @@map("auth")
}

enum Role {
    Admin
    Student
    Teacher
}

model FiscalYear {
    id        Int      @id @default(sequence())
    userInId  String?
    yearId    String   @unique @default(uuid())
    name      String?
    createdAt DateTime @default(now())
    active    Boolean
    startDate String?
    endDate   String?
    selected  Boolean  @default(false)
}

model TeacherInfo {
    id                   Int       @id @default(sequence())
    teacherInfoId        String    @unique @default(uuid())
    userInId             String?   @unique
    userId               String?
    teacherName          String?
    teacherPhone         String?
    teacherEmail         String?   @unique
    teacherPhoto         String?
    fiscalYear           String?
    createdAt            DateTime  @default(now())
    lastUpdatedTimeStamp DateTime?

    @@map("teacherInfo")
}

model StudentInfo {
    id                   Int       @id @default(sequence())
    studentInfoId        String    @unique @default(uuid())
    userInId             String?
    studentName          String?
    gender               String?
    mobile               String?
    photo                String?
    createdAt            DateTime  @default(now())
    lastUpdatedTimeStamp DateTime?
    fiscalYear           String?

    @@map("studentInfo")
}

model Applicant {
    id                  Int              @id @default(sequence())
    applicantId         String           @unique @default(uuid())
    name                String
    customId            String?
    userId              String?
    fiscalYear          String?
    companyId           String?
    email               String?
    secondaryEmail      String?
    phoneNumber         String?
    secondaryPhone      String?
    dateOfBirth         String?
    gender              Gender?          @default(Other)
    reference           String?
    interestedCountries String?
    interestedCourse    String?
    tags                String?
    counselor           String?
    quickAppointment    Boolean          @default(false)
    checkboxEmail       Boolean          @default(false)
    applicationType     ApplicationType? @default(Leads)
    address             Address?
    academicRecords     AcademicRecord[]
    testScores          TestScore[]
    documents           Document[]
    summary             String?
    createdAt           DateTime         @default(now())
    updatedAt           DateTime         @updatedAt
}

model Address {
    id           Int       @id @default(sequence())
    addressId    String    @unique @default(uuid())
    countryName  String?
    city         String?
    state        String?
    district     String?
    municipality String?
    zipPostal    String?
    street       String?
    applicantId  String    @unique
    applicant    Applicant @relation(fields: [applicantId], references: [applicantId])
}

model AcademicRecord {
    id          Int        @id @default(sequence())
    academicId  String     @unique @default(uuid())
    institution String?
    degreeTitle String?
    degreeLevel String?
    passedYear  String?
    courseStart String?
    courseEnd   String?
    subject     String?
    percentage  Float?
    gpa         Float?
    gradeType   GradeType?
    applicantId String
    applicant   Applicant  @relation(fields: [applicantId], references: [applicantId])
}

model TestScore {
    id           Int       @id @default(sequence())
    testId       String    @unique @default(uuid())
    testType     String?
    overall      String?
    listening    String?
    reading      String?
    writing      String?
    speaking     String?
    attendedDate String?
    applicantId  String
    applicant    Applicant @relation(fields: [applicantId], references: [applicantId])
}

model Document {
    id          Int       @id @default(sequence())
    documentId  String    @unique @default(uuid())
    fileUrl     String?
    applicantId String
    applicant   Applicant @relation(fields: [applicantId], references: [applicantId])
}

enum Gender {
    Male
    Female
    Other
}

enum GradeType {
    percentage
    gpa
}

enum ApplicationType {
    Leads
    Inquiring
    ClassEnrollment
    AbroadEnrollment
}

model ManagerInfo {
    id                   Int       @id @default(sequence())
    assetManagerInfoId   String    @unique @default(uuid())
    userInId             String?   @unique
    userId               String?
    managerName          String?
    managerPhone         String?
    userName             String?   @unique
    managerPassword      String?
    linkedAccount        String?
    managerEmail         String?   @unique
    associatedLocation   String[]
    managerPhoto         String?
    fiscalYear           String?
    createdAt            DateTime  @default(now())
    lastUpdatedTimeStamp DateTime?

    @@map("managerInfo")
}
